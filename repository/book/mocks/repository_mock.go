// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Go\api-go\repository\book\repository.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	gomock "github.com/golang/mock/gomock"
	book "github.com/scys12/simple-api-go/models/book"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertBook mocks base method
func (m *MockRepository) InsertBook(arg0 book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBook indicates an expected call of InsertBook
func (mr *MockRepositoryMockRecorder) InsertBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBook", reflect.TypeOf((*MockRepository)(nil).InsertBook), arg0)
}

// FindAllBooks mocks base method
func (m *MockRepository) FindAllBooks() ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooks")
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooks indicates an expected call of FindAllBooks
func (mr *MockRepositoryMockRecorder) FindAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooks", reflect.TypeOf((*MockRepository)(nil).FindAllBooks))
}

// FindBooksByID mocks base method
func (m *MockRepository) FindBooksByID(arg0 string) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByID", arg0)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByID indicates an expected call of FindBooksByID
func (mr *MockRepositoryMockRecorder) FindBooksByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByID", reflect.TypeOf((*MockRepository)(nil).FindBooksByID), arg0)
}

// UpdateBook mocks base method
func (m *MockRepository) UpdateBook(arg0 book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockRepositoryMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepository)(nil).UpdateBook), arg0)
}

// RemoveBook mocks base method
func (m *MockRepository) RemoveBook(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBook indicates an expected call of RemoveBook
func (mr *MockRepositoryMockRecorder) RemoveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBook", reflect.TypeOf((*MockRepository)(nil).RemoveBook), arg0)
}
