// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	item "github.com/scys12/clean-architecture-golang/usecase/item"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	request "github.com/scys12/clean-architecture-golang/pkg/payload/request"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: _a0, _a1
func (_m *Usecase) CreateItem(_a0 context.Context, _a1 *request.ItemRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ItemRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllItems provides a mock function with given fields: _a0, _a1
func (_m *Usecase) GetAllItems(_a0 context.Context, _a1 string) (*item.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *item.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *item.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*item.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: _a0, _a1
func (_m *Usecase) GetItem(_a0 context.Context, _a1 string) (*item.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *item.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *item.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*item.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemBasedOnCategory provides a mock function with given fields: _a0
func (_m *Usecase) GetItemBasedOnCategory(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemBasedOnUserOwner provides a mock function with given fields: _a0
func (_m *Usecase) GetItemBasedOnUserOwner(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveItem provides a mock function with given fields: _a0, _a1
func (_m *Usecase) RemoveItem(_a0 context.Context, _a1 primitive.ObjectID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchUserItem provides a mock function with given fields: _a0
func (_m *Usecase) SearchUserItem(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItem provides a mock function with given fields: _a0, _a1
func (_m *Usecase) UpdateItem(_a0 context.Context, _a1 *request.ItemRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ItemRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
